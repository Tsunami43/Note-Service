from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from provider import provider_note
from provider.models import AccessTokenResponse


class SearchNoteStates(StatesGroup):
    waiting_for_tag = State()


router = Router()


@router.message(Command("search_notes"))
async def start_search_note_handler(
    message: Message, state: FSMContext, user: AccessTokenResponse
):
    if not user:
        await message.answer(
            "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /login."
        )
        return
    await message.answer(
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è /cancel.\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫:"
    )
    await state.set_state(SearchNoteStates.waiting_for_tag)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–≥–∞ –∏ –ø–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ —á–µ—Ä–µ–∑ API
@router.message(StateFilter(SearchNoteStates.waiting_for_tag))
async def handle_tag(message: Message, state: FSMContext, user: AccessTokenResponse):
    tag = message.text

    notes = await provider_note.search_notes_by_tag(user.access_token, tag)

    if notes:
        notes_summary = [
            f"üìù <b>–ó–∞–º–µ—Ç–∫–∞ ID:</b> <code>{note.id}</code>\n"
            f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> <i>{note.title}</i>\n"
            f"<b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b> <i>{note.content}</i>\n"
            f"<b>–¢–µ–≥–∏:</b> {', '.join(note.tags) if note.tags else '–ù–µ—Ç —Ç–µ–≥–æ–≤'}\n"
            f"<b>–°–æ–∑–¥–∞–Ω–∞:</b> <i>{note.created_at.strftime('%d.%m.%Y %H:%M:%S')}</i>\n"
            f"<b>–û–±–Ω–æ–≤–ª–µ–Ω–∞:</b> <i>{note.updated_at.strftime('%d.%m.%Y %H:%M:%S')}</i>\n"
            f"{'-'*40}\n"
            for note in notes
        ]
        result = "\n".join(notes_summary)
        await message.answer(
            f"üìö <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫:</b> <code>{len(notes)}</code>\n\n{result}",
            parse_mode="HTML",
        )
    else:
        await message.answer(f"üì≠ –ó–∞–º–µ—Ç–∫–∏ —Å —Ç–µ–≥–æ–º {tag} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    await state.clear()
