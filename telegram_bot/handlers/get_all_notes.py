from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from provider import provider_note
from provider.models import AccessTokenResponse

router = Router()


@router.message(Command("get_all_notes"))
async def get_all_notes_handler(
    message: Message, state: FSMContext, user: AccessTokenResponse
):
    if not user:
        await message.answer(
            "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /login."
        )
        return

    notes = await provider_note.get_all_notes(user.access_token)

    if notes:
        notes_summary = [
            f"üìù <b>–ó–∞–º–µ—Ç–∫–∞ ID:</b> <code>{note.id}</code>\n"
            f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> <i>{note.title}</i>\n"
            f"<b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b> <i>{note.content}</i>\n"
            f"<b>–¢–µ–≥–∏:</b> {', '.join(note.tags) if note.tags else '–ù–µ—Ç —Ç–µ–≥–æ–≤'}\n"
            f"<b>–°–æ–∑–¥–∞–Ω–∞:</b> <i>{note.created_at.strftime('%d.%m.%Y %H:%M:%S')}</i>\n"
            f"<b>–û–±–Ω–æ–≤–ª–µ–Ω–∞:</b> <i>{note.updated_at.strftime('%d.%m.%Y %H:%M:%S')}</i>\n"
            f"{'-'*40}\n"
            for note in notes
        ]
        result = "\n".join(notes_summary)
        await message.answer(
            f"üìö <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫:</b> <code>{len(notes)}</code>\n\n{result}",
            parse_mode="HTML",
        )
    else:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
